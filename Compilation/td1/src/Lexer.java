/* The following code was generated by JFlex 1.6.1 */

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/autofs/unityaccount/cremi/rlasvenes/td1/jflex/Lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\12\1\12\1\12\1\12\23\0\1\45\1\7\2\0\1\45"+
    "\1\43\1\0\1\6\1\6\1\11\1\42\1\6\1\5\1\3\1\10"+
    "\12\2\1\6\1\6\1\46\1\50\1\47\2\0\4\1\1\4\25\1"+
    "\1\6\1\0\1\6\1\45\1\1\1\0\1\20\1\13\1\22\1\31"+
    "\1\17\1\32\1\34\1\25\1\27\1\1\1\21\1\15\1\33\1\26"+
    "\1\14\1\35\1\1\1\16\1\23\1\24\1\30\1\37\1\36\1\1"+
    "\1\41\1\40\1\6\1\51\1\6\1\44\6\0\1\12\u1fa2\0\1\12"+
    "\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\4"+
    "\1\1\2\5\21\2\6\5\5\0\1\6\1\7\1\0"+
    "\26\2\1\10\2\2\1\11\13\2\1\12\2\0\24\2"+
    "\1\13\4\2\1\14\2\2\1\15\6\2\1\16\12\2"+
    "\1\17\1\0\1\20\2\2\1\21\2\2\1\22\1\23"+
    "\3\2\1\24\1\2\1\25\6\2\1\26\2\2\1\27"+
    "\14\2\1\30\4\2\1\31\1\2\1\17\1\32\3\2"+
    "\1\33\1\2\1\34\1\35\2\2\1\36\4\2\1\37"+
    "\5\2\1\40\1\2\1\41\3\2\1\42\1\2\1\43"+
    "\3\2\1\44\2\2\1\45\2\2\1\46\1\47\1\50"+
    "\1\51\1\52\2\2\1\53\2\2\1\54\1\2\1\55"+
    "\1\56\1\2\1\57\1\2\1\60\6\2\1\61\2\2"+
    "\1\62\1\2\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\2\1\71\1\2\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\52"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\52\0\u04c2"+
    "\0\u04ec\0\u0516\0\250\0\u0540\0\u056a\0\u0594\0\u0126\0\52"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\124\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0594"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\124\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u1014\0\124\0\u103e\0\u1068\0\124\0\u1092"+
    "\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\124\0\u118e\0\u11b8"+
    "\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308"+
    "\0\u05e8\0\u1332\0\124\0\u135c\0\u1386\0\124\0\u13b0\0\u13da"+
    "\0\124\0\124\0\u1404\0\u142e\0\u1458\0\124\0\u1482\0\124"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\124\0\u15a8"+
    "\0\u15d2\0\124\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\124\0\u17f4"+
    "\0\u181e\0\u1848\0\u1872\0\124\0\u189c\0\52\0\124\0\u18c6"+
    "\0\u18f0\0\u191a\0\124\0\u1944\0\124\0\124\0\u196e\0\u1998"+
    "\0\124\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\124\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\124\0\u1b3c\0\124\0\u1b66\0\u1b90"+
    "\0\u1bba\0\124\0\u1be4\0\124\0\u1c0e\0\u1c38\0\u1c62\0\124"+
    "\0\u1c8c\0\u1cb6\0\124\0\u1ce0\0\u1d0a\0\124\0\124\0\124"+
    "\0\124\0\124\0\u1d34\0\u1d5e\0\124\0\u1d88\0\u1db2\0\124"+
    "\0\u1ddc\0\124\0\124\0\u1e06\0\124\0\u1e30\0\124\0\u1e5a"+
    "\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\124\0\u1f56\0\u1f80"+
    "\0\124\0\u1faa\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\u1fd4\0\124\0\u1ffe\0\124\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\2\3\1\21\1\22\1\23\1\3\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\33\1\34\2\3"+
    "\1\35\1\36\1\37\1\13\1\40\1\41\1\13\1\42"+
    "\53\0\2\3\1\0\1\3\6\0\27\3\12\0\1\4"+
    "\1\43\1\44\12\0\1\44\34\0\1\45\50\0\2\3"+
    "\1\0\1\3\1\46\5\0\27\3\1\46\14\0\1\37"+
    "\42\0\1\37\1\0\7\47\1\50\42\47\10\0\1\51"+
    "\1\52\36\0\1\37\51\0\1\37\2\0\2\3\1\0"+
    "\1\3\6\0\1\3\1\53\1\3\1\54\23\3\11\0"+
    "\2\3\1\0\1\3\6\0\22\3\1\55\4\3\11\0"+
    "\2\3\1\0\1\3\6\0\1\3\1\56\25\3\11\0"+
    "\2\3\1\0\1\3\6\0\4\3\1\57\22\3\11\0"+
    "\2\3\1\0\1\3\1\46\5\0\2\3\1\60\10\3"+
    "\1\61\13\3\1\46\10\0\2\3\1\0\1\3\6\0"+
    "\1\3\1\62\1\63\2\3\1\64\4\3\1\65\14\3"+
    "\11\0\2\3\1\0\1\3\6\0\11\3\1\66\1\67"+
    "\1\3\1\70\6\3\1\71\3\3\11\0\2\3\1\0"+
    "\1\3\6\0\3\3\1\72\1\73\5\3\1\74\13\3"+
    "\1\75\11\0\2\3\1\0\1\3\6\0\4\3\1\76"+
    "\1\77\21\3\11\0\2\3\1\0\1\3\6\0\13\3"+
    "\1\100\3\3\1\101\7\3\11\0\2\3\1\0\1\3"+
    "\6\0\10\3\1\102\2\3\1\103\13\3\11\0\2\3"+
    "\1\0\1\3\6\0\1\3\1\104\2\3\1\105\22\3"+
    "\11\0\2\3\1\0\1\3\6\0\1\3\1\106\1\107"+
    "\1\110\1\3\1\111\21\3\11\0\2\3\1\0\1\3"+
    "\6\0\1\3\1\112\25\3\11\0\2\3\1\0\1\3"+
    "\6\0\3\3\1\113\11\3\1\114\11\3\11\0\2\3"+
    "\1\0\1\3\6\0\12\3\1\115\14\3\11\0\2\3"+
    "\1\0\1\3\6\0\1\3\1\116\12\3\1\117\12\3"+
    "\52\0\1\37\5\0\1\37\44\0\1\37\4\0\1\37"+
    "\47\0\1\13\1\0\1\37\50\0\1\13\1\37\51\0"+
    "\2\37\2\0\1\120\2\0\1\46\34\0\1\46\11\0"+
    "\1\45\1\0\1\44\12\0\1\44\34\0\1\120\47\0"+
    "\12\51\1\0\37\51\11\52\1\121\1\122\37\52\1\0"+
    "\2\3\1\0\1\3\6\0\1\3\1\123\25\3\11\0"+
    "\2\3\1\0\1\3\6\0\4\3\1\124\22\3\11\0"+
    "\2\3\1\0\1\3\6\0\4\3\1\125\22\3\11\0"+
    "\2\3\1\0\1\3\6\0\13\3\1\126\13\3\11\0"+
    "\2\3\1\0\1\3\6\0\11\3\1\127\7\3\1\130"+
    "\5\3\11\0\2\3\1\0\1\3\6\0\10\3\1\131"+
    "\16\3\11\0\2\3\1\0\1\3\6\0\15\3\1\132"+
    "\11\3\11\0\2\3\1\0\1\3\6\0\13\3\1\133"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\5\3\1\134"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\10\3\1\135"+
    "\1\136\15\3\11\0\2\3\1\0\1\3\6\0\5\3"+
    "\1\137\21\3\11\0\2\3\1\0\1\3\6\0\3\3"+
    "\1\140\1\3\1\141\21\3\11\0\2\3\1\0\1\3"+
    "\6\0\1\3\1\142\25\3\11\0\2\3\1\0\1\3"+
    "\6\0\21\3\1\143\3\3\1\144\1\3\11\0\2\3"+
    "\1\0\1\3\6\0\14\3\1\145\12\3\11\0\2\3"+
    "\1\0\1\3\6\0\15\3\1\146\10\3\1\147\11\0"+
    "\2\3\1\0\1\3\6\0\20\3\1\150\6\3\11\0"+
    "\2\3\1\0\1\3\6\0\3\3\1\151\10\3\1\152"+
    "\12\3\11\0\2\3\1\0\1\3\6\0\22\3\1\153"+
    "\4\3\11\0\2\3\1\0\1\3\6\0\23\3\1\154"+
    "\3\3\11\0\2\3\1\0\1\3\6\0\20\3\1\155"+
    "\6\3\11\0\2\3\1\0\1\3\6\0\2\3\1\156"+
    "\6\3\1\157\15\3\11\0\2\3\1\0\1\3\6\0"+
    "\14\3\1\160\12\3\11\0\2\3\1\0\1\3\6\0"+
    "\10\3\1\161\3\3\1\162\12\3\11\0\2\3\1\0"+
    "\1\3\6\0\15\3\1\163\11\3\11\0\2\3\1\0"+
    "\1\3\6\0\2\3\1\164\14\3\1\165\7\3\11\0"+
    "\2\3\1\0\1\3\6\0\3\3\1\166\23\3\11\0"+
    "\2\3\1\0\1\3\6\0\1\3\1\167\25\3\11\0"+
    "\2\3\1\0\1\3\6\0\14\3\1\170\12\3\11\0"+
    "\2\3\1\0\1\3\6\0\2\3\1\171\24\3\11\0"+
    "\2\3\1\0\1\3\6\0\11\3\1\172\15\3\11\0"+
    "\2\3\1\0\1\3\6\0\1\3\1\173\12\3\1\174"+
    "\12\3\11\0\2\3\1\0\1\3\6\0\1\175\26\3"+
    "\11\0\2\3\1\0\1\3\6\0\14\3\1\176\12\3"+
    "\11\0\2\3\1\0\1\3\6\0\14\3\1\177\12\3"+
    "\11\0\2\3\1\0\1\3\6\0\3\3\1\200\23\3"+
    "\10\0\10\52\1\201\1\121\1\122\37\52\11\122\1\202"+
    "\40\122\1\0\2\3\1\0\1\3\6\0\2\3\1\203"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\5\3\1\204"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\3\3\1\205"+
    "\23\3\11\0\2\3\1\0\1\3\6\0\21\3\1\206"+
    "\5\3\11\0\2\3\1\0\1\3\6\0\15\3\1\207"+
    "\11\3\11\0\2\3\1\0\1\3\6\0\14\3\1\210"+
    "\12\3\11\0\2\3\1\0\1\3\6\0\4\3\1\211"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\20\3\1\212"+
    "\6\3\11\0\2\3\1\0\1\3\6\0\10\3\1\213"+
    "\1\214\15\3\11\0\2\3\1\0\1\3\6\0\10\3"+
    "\1\215\16\3\11\0\2\3\1\0\1\3\6\0\4\3"+
    "\1\216\22\3\11\0\2\3\1\0\1\3\6\0\7\3"+
    "\1\217\17\3\11\0\2\3\1\0\1\3\6\0\3\3"+
    "\1\220\23\3\11\0\2\3\1\0\1\3\6\0\15\3"+
    "\1\221\11\3\11\0\2\3\1\0\1\3\6\0\11\3"+
    "\1\222\15\3\11\0\2\3\1\0\1\3\6\0\3\3"+
    "\1\223\23\3\11\0\2\3\1\0\1\3\6\0\13\3"+
    "\1\224\13\3\11\0\2\3\1\0\1\3\6\0\4\3"+
    "\1\225\22\3\11\0\2\3\1\0\1\3\6\0\11\3"+
    "\1\226\15\3\11\0\2\3\1\0\1\3\6\0\4\3"+
    "\1\227\22\3\11\0\2\3\1\0\1\3\6\0\22\3"+
    "\1\230\4\3\11\0\2\3\1\0\1\3\6\0\1\3"+
    "\1\231\25\3\11\0\2\3\1\0\1\3\6\0\10\3"+
    "\1\232\16\3\11\0\2\3\1\0\1\3\6\0\4\3"+
    "\1\233\22\3\11\0\2\3\1\0\1\3\6\0\4\3"+
    "\1\234\22\3\11\0\2\3\1\0\1\3\6\0\14\3"+
    "\1\235\12\3\11\0\2\3\1\0\1\3\6\0\13\3"+
    "\1\236\13\3\11\0\2\3\1\0\1\3\6\0\14\3"+
    "\1\237\12\3\11\0\2\3\1\0\1\3\6\0\1\3"+
    "\1\240\25\3\11\0\2\3\1\0\1\3\6\0\1\241"+
    "\26\3\11\0\2\3\1\0\1\3\6\0\4\3\1\242"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\5\3\1\243"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\5\3\1\244"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\4\3\1\245"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\10\3\1\246"+
    "\16\3\11\0\2\3\1\0\1\3\6\0\1\3\1\247"+
    "\25\3\11\0\2\3\1\0\1\3\6\0\11\3\1\250"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\24\3\1\251"+
    "\2\3\11\0\2\3\1\0\1\3\6\0\2\3\1\252"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\2\3\1\253"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\16\3\1\254"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\11\3\1\255"+
    "\15\3\10\0\10\122\1\256\1\202\40\122\1\0\2\3"+
    "\1\0\1\3\6\0\6\3\1\257\20\3\11\0\2\3"+
    "\1\0\1\3\6\0\5\3\1\260\21\3\11\0\2\3"+
    "\1\0\1\3\6\0\3\3\1\261\23\3\11\0\2\3"+
    "\1\0\1\3\6\0\10\3\1\262\16\3\11\0\2\3"+
    "\1\0\1\3\6\0\11\3\1\263\15\3\11\0\2\3"+
    "\1\0\1\3\6\0\14\3\1\264\12\3\11\0\2\3"+
    "\1\0\1\3\6\0\10\3\1\265\16\3\11\0\2\3"+
    "\1\0\1\3\6\0\12\3\1\266\14\3\11\0\2\3"+
    "\1\0\1\3\6\0\7\3\1\267\17\3\11\0\2\3"+
    "\1\0\1\3\6\0\14\3\1\270\12\3\11\0\2\3"+
    "\1\0\1\3\6\0\11\3\1\271\15\3\11\0\2\3"+
    "\1\0\1\3\6\0\4\3\1\272\22\3\11\0\2\3"+
    "\1\0\1\3\6\0\1\3\1\273\25\3\11\0\2\3"+
    "\1\0\1\3\6\0\7\3\1\274\17\3\11\0\2\3"+
    "\1\0\1\3\6\0\2\3\1\275\24\3\11\0\2\3"+
    "\1\0\1\3\6\0\23\3\1\276\3\3\11\0\2\3"+
    "\1\0\1\3\6\0\13\3\1\277\1\300\1\3\1\301"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\10\3\1\302"+
    "\16\3\11\0\2\3\1\0\1\3\6\0\13\3\1\303"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\21\3\1\304"+
    "\5\3\11\0\2\3\1\0\1\3\6\0\21\3\1\305"+
    "\5\3\11\0\2\3\1\0\1\3\6\0\13\3\1\306"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\2\3\1\307"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\11\3\1\310"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\15\3\1\311"+
    "\11\3\11\0\2\3\1\0\1\3\6\0\11\3\1\312"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\13\3\1\313"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\4\3\1\314"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\4\3\1\315"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\5\3\1\316"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\14\3\1\317"+
    "\12\3\11\0\2\3\1\0\1\3\6\0\4\3\1\320"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\15\3\1\321"+
    "\11\3\11\0\2\3\1\0\1\3\6\0\11\3\1\322"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\13\3\1\323"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\11\3\1\324"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\13\3\1\325"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\11\3\1\326"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\7\3\1\327"+
    "\17\3\11\0\2\3\1\0\1\3\6\0\16\3\1\330"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\17\3\1\331"+
    "\7\3\11\0\2\3\1\0\1\3\6\0\12\3\1\332"+
    "\14\3\11\0\2\3\1\0\1\3\6\0\5\3\1\333"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\5\3\1\334"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\16\3\1\335"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\4\3\1\336"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\22\3\1\337"+
    "\4\3\11\0\2\3\1\0\1\3\6\0\4\3\1\340"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\13\3\1\341"+
    "\13\3\11\0\2\3\1\0\1\3\6\0\4\3\1\342"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\4\3\1\343"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\2\3\1\344"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\16\3\1\345"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\7\3\1\346"+
    "\17\3\11\0\2\3\1\0\1\3\6\0\11\3\1\303"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\7\3\1\347"+
    "\17\3\11\0\2\3\1\0\1\3\6\0\5\3\1\350"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\1\3\1\351"+
    "\25\3\11\0\2\3\1\0\1\3\6\0\4\3\1\352"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\15\3\1\353"+
    "\11\3\11\0\2\3\1\0\1\3\6\0\11\3\1\354"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\20\3\1\355"+
    "\6\3\11\0\2\3\1\0\1\3\6\0\17\3\1\356"+
    "\7\3\11\0\2\3\1\0\1\3\6\0\5\3\1\357"+
    "\21\3\11\0\2\3\1\0\1\3\6\0\4\3\1\360"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\11\3\1\361"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\11\3\1\362"+
    "\15\3\11\0\2\3\1\0\1\3\6\0\2\3\1\363"+
    "\24\3\11\0\2\3\1\0\1\3\6\0\3\3\1\364"+
    "\23\3\11\0\2\3\1\0\1\3\6\0\3\3\1\365"+
    "\23\3\11\0\2\3\1\0\1\3\6\0\4\3\1\366"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\4\3\1\367"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\4\3\1\370"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\7\3\1\371"+
    "\17\3\11\0\2\3\1\0\1\3\6\0\16\3\1\372"+
    "\10\3\11\0\2\3\1\0\1\3\6\0\4\3\1\373"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\4\3\1\374"+
    "\22\3\11\0\2\3\1\0\1\3\6\0\16\3\1\375"+
    "\10\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\26\1\1\11\3\1\5\0"+
    "\1\11\1\1\1\0\46\1\2\0\57\1\1\0\53\1"+
    "\1\11\117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Code java en début de la classe */
    /* Par défaut, en JAVA, tout attribut de classe est initialisé à 0 */
    int nbMotsCles = 0;
    int nbOperateurs = 0;
    int nbIdentificateurs = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
          System.out.printf("Nombre de lignes et colonnes et caractères: (%d, %d, %d)\n", yyline, yycolumn, yychar);
      System.out.printf("Nombre d'identificateurs: %d\n", nbIdentificateurs);
      System.out.printf("Nombre de mots clés: %d\n", nbMotsCles);
      System.out.printf("Nombre d'opérateurs: %d\n", nbOperateurs);

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 60: break;
          case 2: 
            { System.out.printf("IDENTIFICATEUR DÉTECTÉ: %s\n", yytext());nbIdentificateurs++;
            }
          case 61: break;
          case 3: 
            { System.out.printf("ENTIER DÉTECTÉ: %s\n", yytext());
            }
          case 62: break;
          case 4: 
            { System.out.printf("SEPARATEUR: %s\n", yytext());
            }
          case 63: break;
          case 5: 
            { ++nbOperateurs;System.out.printf("OPERATOR: %s\n", yytext());
            }
          case 64: break;
          case 6: 
            { System.out.printf("STRING: %s\n", yytext());
            }
          case 65: break;
          case 7: 
            { System.out.printf("COMMENTAIRE SIMPLE: %s\n", yytext());
            }
          case 66: break;
          case 8: 
            { ++nbMotsCles;System.out.printf("IF: %s\n", yytext());
            }
          case 67: break;
          case 9: 
            { ++nbMotsCles;System.out.printf("DO: %s\n", yytext());
            }
          case 68: break;
          case 10: 
            { System.out.printf("FLOTTANT DÉTECTÉ: %s\n", yytext());
            }
          case 69: break;
          case 11: 
            { ++nbMotsCles;System.out.printf("TRY: %s\n", yytext());
            }
          case 70: break;
          case 12: 
            { ++nbMotsCles;System.out.printf("NEW: %s\n", yytext());
            }
          case 71: break;
          case 13: 
            { ++nbMotsCles;System.out.printf("INT: %s\n", yytext());
            }
          case 72: break;
          case 14: 
            { ++nbMotsCles;System.out.printf("FOR: %s\n", yytext());
            }
          case 73: break;
          case 15: 
            { System.out.printf("COMMENTAIRE MULTIPLE: %s\n", yytext());
            }
          case 74: break;
          case 16: 
            { ++nbMotsCles;System.out.printf("BOOL: %s\n", yytext());
            }
          case 75: break;
          case 17: 
            { ++nbMotsCles;System.out.printf("LONG: %s\n", yytext());
            }
          case 76: break;
          case 18: 
            { ++nbMotsCles;System.out.printf("ELSE: %s\n", yytext());
            }
          case 77: break;
          case 19: 
            { ++nbMotsCles;System.out.printf("ENUM: %s\n", yytext());
            }
          case 78: break;
          case 20: 
            { ++nbMotsCles;System.out.printf("CASE: %s\n", yytext());
            }
          case 79: break;
          case 21: 
            { ++nbMotsCles;System.out.printf("CHAR: %s\n", yytext());
            }
          case 80: break;
          case 22: 
            { ++nbMotsCles;System.out.printf("TRUE: %s\n", yytext());
            }
          case 81: break;
          case 23: 
            { ++nbMotsCles;System.out.printf("THIS: %s\n", yytext());
            }
          case 82: break;
          case 24: 
            { ++nbMotsCles;System.out.printf("GOTO: %s\n", yytext());
            }
          case 83: break;
          case 25: 
            { ++nbMotsCles;System.out.printf("VOID: %s\n", yytext());
            }
          case 84: break;
          case 26: 
            { ++nbMotsCles;System.out.printf("BREAK: %s\n", yytext());
            }
          case 85: break;
          case 27: 
            { ++nbMotsCles;System.out.printf("CONST: %s\n", yytext());
            }
          case 86: break;
          case 28: 
            { ++nbMotsCles;System.out.printf("CLASS: %s\n", yytext());
            }
          case 87: break;
          case 29: 
            { ++nbMotsCles;System.out.printf("CATCH: %s\n", yytext());
            }
          case 88: break;
          case 30: 
            { ++nbMotsCles;System.out.printf("SHORT: %s\n", yytext());
            }
          case 89: break;
          case 31: 
            { ++nbMotsCles;System.out.printf("THROW: %s\n", yytext());
            }
          case 90: break;
          case 32: 
            { ++nbMotsCles;System.out.printf("USING: %s\n", yytext());
            }
          case 91: break;
          case 33: 
            { ++nbMotsCles;System.out.printf("UNION: %s\n", yytext());
            }
          case 92: break;
          case 34: 
            { ++nbMotsCles;System.out.printf("FLOAT: %s\n", yytext());
            }
          case 93: break;
          case 35: 
            { ++nbMotsCles;System.out.printf("FALSE: %s\n", yytext());
            }
          case 94: break;
          case 36: 
            { ++nbMotsCles;System.out.printf("WHILE: %s\n", yytext());
            }
          case 95: break;
          case 37: 
            { ++nbMotsCles;System.out.printf("RETURN: %s\n", yytext());
            }
          case 96: break;
          case 38: 
            { ++nbMotsCles;System.out.printf("STRUCT: %s\n", yytext());
            }
          case 97: break;
          case 39: 
            { ++nbMotsCles;System.out.printf("STATIC: %s\n", yytext());
            }
          case 98: break;
          case 40: 
            { ++nbMotsCles;System.out.printf("SIGNED: %s\n", yytext());
            }
          case 99: break;
          case 41: 
            { ++nbMotsCles;System.out.printf("SIZEOF: %s\n", yytext());
            }
          case 100: break;
          case 42: 
            { ++nbMotsCles;System.out.printf("SWITCH: %s\n", yytext());
            }
          case 101: break;
          case 43: 
            { ++nbMotsCles;System.out.printf("TYPEID: %s\n", yytext());
            }
          case 102: break;
          case 44: 
            { ++nbMotsCles;System.out.printf("INLINE: %s\n", yytext());
            }
          case 103: break;
          case 45: 
            { ++nbMotsCles;System.out.printf("DOUBLE: %s\n", yytext());
            }
          case 104: break;
          case 46: 
            { ++nbMotsCles;System.out.printf("DELETE: %s\n", yytext());
            }
          case 105: break;
          case 47: 
            { ++nbMotsCles;System.out.printf("FRIEND: %s\n", yytext());
            }
          case 106: break;
          case 48: 
            { ++nbMotsCles;System.out.printf("PUBLIC: %s\n", yytext());
            }
          case 107: break;
          case 49: 
            { ++nbMotsCles;System.out.printf("TYPEDEF: %s\n", yytext());
            }
          case 108: break;
          case 50: 
            { ++nbMotsCles;System.out.printf("DEFAULT: %s\n", yytext());
            }
          case 109: break;
          case 51: 
            { ++nbMotsCles;System.out.printf("VIRTUAL: %s\n", yytext());
            }
          case 110: break;
          case 52: 
            { ++nbMotsCles;System.out.printf("OPERATOR: %s\n", yytext());
            }
          case 111: break;
          case 53: 
            { ++nbMotsCles;System.out.printf("REGISTER: %s\n", yytext());
            }
          case 112: break;
          case 54: 
            { ++nbMotsCles;System.out.printf("CONTINUE: %s\n", yytext());
            }
          case 113: break;
          case 55: 
            { ++nbMotsCles;System.out.printf("TEMPLATE: %s\n", yytext());
            }
          case 114: break;
          case 56: 
            { ++nbMotsCles;System.out.printf("TYPENAME: %s\n", yytext());
            }
          case 115: break;
          case 57: 
            { ++nbMotsCles;System.out.printf("UNSIGNED: %s\n", yytext());
            }
          case 116: break;
          case 58: 
            { ++nbMotsCles;System.out.printf("NAMESPACE: %s\n", yytext());
            }
          case 117: break;
          case 59: 
            { ++nbMotsCles;System.out.printf("PROTECTED: %s\n", yytext());
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

%class "ParserExpr";

%terminals AND, OR, NEGATION, TRUE, FALSE, LPARENTH, RPARENTH, VARIABLE, PLUS, MULT, MINUS, DIVIDE, LOWER, LOwER_EQ, GREATER, GREATER_EQ, EQUAL, NOT_EQUAL;
/* Syntaxe dite "EBNR", langage pour d√©crire les langages */
%left MULT, DIVIDE;
%left PLUS, MINUS;
%goal Expr;

Expr = Expr AND Term
    | Term
    ;

Term = Term OR Factor
    | Factor
    ;

Factor = TRUE
    | FALSE
    | VARIABLE
    | LPARENTH Expr RPARENTH
    | NEGATION LPARENTH Expr RPARENTH
    ;

// ************************************* Suite Td 3.4 / Td 4 **************************************************

ExprArithm  = ExprArithm.a  MULT    ExprArithm.b {: return new MySymbol(a.value * b.value); :}
            | ExprArithm.a  DIVIDE  ExprArithm.b {: return new MySymbol(a.value / b.value); :}
            | ExprArithm.a  PLUS    ExprArithm.b {: return new MySymbol(a.value + b.value); :}
            | ExprArithm.a  MINUS   ExprArithm.b {: return new MySymbol(a.value - b.value); :}
            ;

ExprComp =
    |
    ;

ExprLog =
    |
    ;

/* The following code was generated by JFlex 1.6.1 */

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/autofs/unityaccount/cremi/rlasvenes/td2/jflex/Tokenizer.jflex</tt>
 */
public class Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int COMMENT_DOC = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\10\1\11\1\11\1\11\22\0\1\21\1\46\1\5\2\0"+
    "\1\47\1\44\1\0\1\3\1\3\1\7\1\43\1\3\1\4\1\3"+
    "\1\6\12\2\1\3\1\3\1\50\1\52\1\51\1\0\1\12\4\1"+
    "\1\1\25\1\1\3\1\0\1\3\1\53\1\1\1\0\1\13\1\22"+
    "\1\26\1\32\1\24\1\33\1\35\1\16\1\31\1\1\1\25\1\23"+
    "\1\34\1\30\1\17\1\36\1\1\1\20\1\27\1\15\1\14\1\40"+
    "\1\37\1\1\1\42\1\41\1\3\1\54\1\3\1\45\6\0\1\11"+
    "\u1fa2\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\21\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\22\1\0\1\23"+
    "\1\1\1\24\1\25\1\26\30\2\1\27\1\30\13\2"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\6\2\1\51\26\2\1\52\1\53\5\2\1\54"+
    "\11\2\1\55\1\56\1\0\4\2\1\57\1\60\5\2"+
    "\1\61\1\2\1\62\1\63\1\64\1\2\1\65\1\66"+
    "\21\2\1\67\4\2\1\70\1\2\1\0\1\71\1\2"+
    "\1\72\1\73\7\2\1\74\1\2\1\75\1\2\1\76"+
    "\1\77\2\2\1\100\10\2\1\101\1\2\1\102\3\2"+
    "\1\103\1\2\1\0\3\2\1\104\2\2\1\105\1\2"+
    "\1\106\1\2\1\107\1\110\1\111\1\112\1\113\1\2"+
    "\1\114\1\115\1\116\1\2\1\117\1\120\3\2\1\0"+
    "\3\2\1\121\4\2\1\122\1\2\1\123\1\124\1\0"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\2\2\1\0"+
    "\1\133\1\134\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\264\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\264\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681"+
    "\0\264\0\264\0\u013b\0\264\0\u06ae\0\u06db\0\264\0\264"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13"+
    "\0\341\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\u0d5c\0\264\0\u0d89\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\u0db6\0\264\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\341\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\341\0\341\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\341\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\264\0\264\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\341\0\341\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\341\0\u1707\0\341\0\u1734\0\341\0\u1761"+
    "\0\341\0\341\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f"+
    "\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7"+
    "\0\u1a04\0\u1a31\0\u1a5e\0\341\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\341\0\u1b3f\0\u1b6c\0\341\0\u1b99\0\341\0\341\0\u1bc6"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\341\0\u1d01"+
    "\0\341\0\u1d2e\0\341\0\341\0\u1d5b\0\u1d88\0\341\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\341"+
    "\0\u1f1d\0\341\0\u1f4a\0\u1f77\0\u1fa4\0\341\0\u1fd1\0\u1ffe"+
    "\0\u202b\0\u2058\0\u2085\0\341\0\u20b2\0\u20df\0\341\0\u210c"+
    "\0\341\0\u2139\0\341\0\341\0\341\0\341\0\341\0\u2166"+
    "\0\341\0\341\0\341\0\u2193\0\341\0\341\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\341\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\341\0\u23af\0\341\0\341\0\u23dc\0\341"+
    "\0\341\0\341\0\341\0\341\0\341\0\u2409\0\u2436\0\u2463"+
    "\0\341\0\341\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\3\5\1\6\1\14\1\15\1\6\1\16\1\17\1\5"+
    "\1\20\1\21\1\22\1\6\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\1\32\1\33\1\34\2\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\7\5\1\47\54\5\1\47\2\5\1\50"+
    "\117\5\56\0\2\6\10\0\6\6\1\0\21\6\16\0"+
    "\1\51\45\0\1\52\2\0\5\53\1\54\47\53\6\0"+
    "\1\55\1\56\42\0\1\57\54\0\1\60\3\0\2\6"+
    "\10\0\6\6\1\0\5\6\1\61\1\62\12\6\13\0"+
    "\2\6\10\0\3\6\1\63\1\6\1\64\1\0\2\6"+
    "\1\65\15\6\1\66\13\0\2\6\10\0\6\6\1\0"+
    "\14\6\1\67\4\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\70\16\6\13\0\2\6\10\0\4\6\1\71"+
    "\1\72\1\0\21\6\13\0\2\6\10\0\4\6\1\73"+
    "\1\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\1\6\1\74\4\6\1\75\12\6\13\0\2\6\10\0"+
    "\1\76\2\6\1\77\1\100\1\6\1\0\1\6\1\101"+
    "\17\6\13\0\2\6\10\0\2\6\1\102\1\103\2\6"+
    "\1\0\7\6\1\104\5\6\1\105\3\6\13\0\2\6"+
    "\10\0\1\106\5\6\1\0\2\6\1\107\16\6\13\0"+
    "\2\6\10\0\6\6\1\0\6\6\1\110\2\6\1\111"+
    "\7\6\13\0\2\6\10\0\4\6\1\112\1\6\1\0"+
    "\2\6\1\113\16\6\13\0\2\6\10\0\1\114\3\6"+
    "\1\115\1\116\1\0\1\6\1\117\17\6\13\0\2\6"+
    "\10\0\4\6\1\120\1\6\1\0\21\6\13\0\2\6"+
    "\10\0\1\6\1\121\3\6\1\122\1\0\21\6\13\0"+
    "\2\6\10\0\3\6\1\123\2\6\1\0\21\6\13\0"+
    "\2\6\10\0\4\6\1\124\1\6\1\0\7\6\1\125"+
    "\11\6\55\0\1\126\6\0\1\127\46\0\1\130\5\0"+
    "\1\131\54\0\1\132\54\0\1\133\52\0\1\134\1\0"+
    "\1\135\53\0\1\136\1\137\54\0\1\140\54\0\1\141"+
    "\54\0\1\142\1\0\1\143\6\0\1\144\61\0\1\145"+
    "\41\0\10\55\2\0\43\55\7\0\1\146\46\0\2\6"+
    "\10\0\6\6\1\0\7\6\1\147\11\6\13\0\2\6"+
    "\10\0\6\6\1\0\5\6\1\150\1\6\1\151\11\6"+
    "\13\0\2\6\10\0\5\6\1\152\1\0\7\6\1\153"+
    "\11\6\13\0\2\6\10\0\1\6\1\154\4\6\1\0"+
    "\20\6\1\155\13\0\2\6\10\0\6\6\1\0\12\6"+
    "\1\156\6\6\13\0\2\6\10\0\6\6\1\0\14\6"+
    "\1\157\4\6\13\0\2\6\10\0\6\6\1\0\2\6"+
    "\1\160\16\6\13\0\2\6\10\0\2\6\1\161\3\6"+
    "\1\0\13\6\1\162\5\6\13\0\2\6\10\0\4\6"+
    "\1\163\1\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\164\16\6\13\0\2\6\10\0\6\6"+
    "\1\0\6\6\1\165\12\6\13\0\2\6\10\0\6\6"+
    "\1\0\5\6\1\166\13\6\13\0\2\6\10\0\1\6"+
    "\1\167\4\6\1\0\21\6\13\0\2\6\10\0\2\6"+
    "\1\170\3\6\1\0\5\6\1\171\13\6\13\0\2\6"+
    "\10\0\1\172\5\6\1\0\21\6\13\0\2\6\10\0"+
    "\6\6\1\0\6\6\1\173\12\6\13\0\2\6\10\0"+
    "\1\174\5\6\1\0\21\6\13\0\2\6\10\0\1\175"+
    "\4\6\1\176\1\0\21\6\13\0\2\6\10\0\4\6"+
    "\1\177\1\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\13\6\1\200\3\6\1\201\1\6\13\0\2\6"+
    "\10\0\6\6\1\0\7\6\1\202\11\6\13\0\2\6"+
    "\10\0\6\6\1\0\12\6\1\203\6\6\13\0\2\6"+
    "\10\0\6\6\1\0\15\6\1\204\3\6\13\0\2\6"+
    "\10\0\2\6\1\205\3\6\1\0\1\6\1\206\17\6"+
    "\13\0\2\6\10\0\1\6\1\207\4\6\1\0\21\6"+
    "\13\0\2\6\10\0\6\6\1\0\1\6\1\210\7\6"+
    "\1\211\7\6\13\0\2\6\10\0\6\6\1\0\1\6"+
    "\1\212\17\6\13\0\2\6\10\0\5\6\1\213\1\0"+
    "\21\6\13\0\2\6\10\0\6\6\1\0\7\6\1\214"+
    "\11\6\13\0\2\6\10\0\4\6\1\215\1\6\1\0"+
    "\21\6\13\0\2\6\10\0\2\6\1\216\3\6\1\0"+
    "\21\6\13\0\2\6\10\0\6\6\1\0\1\217\20\6"+
    "\13\0\2\6\10\0\4\6\1\220\1\6\1\0\7\6"+
    "\1\221\11\6\13\0\2\6\10\0\6\6\1\0\7\6"+
    "\1\222\11\6\13\0\2\6\10\0\6\6\1\0\7\6"+
    "\1\223\11\6\13\0\2\6\10\0\5\6\1\224\1\0"+
    "\21\6\64\0\1\225\54\0\1\226\16\0\1\227\41\0"+
    "\2\6\10\0\6\6\1\0\6\6\1\230\12\6\13\0"+
    "\2\6\10\0\6\6\1\0\7\6\1\231\11\6\13\0"+
    "\2\6\10\0\4\6\1\232\1\6\1\0\21\6\13\0"+
    "\2\6\10\0\4\6\1\233\1\6\1\0\21\6\13\0"+
    "\2\6\10\0\6\6\1\0\5\6\1\234\13\6\13\0"+
    "\2\6\10\0\6\6\1\0\2\6\1\235\16\6\13\0"+
    "\2\6\10\0\6\6\1\0\14\6\1\236\4\6\13\0"+
    "\2\6\10\0\6\6\1\0\2\6\1\237\16\6\13\0"+
    "\2\6\10\0\5\6\1\240\1\0\21\6\13\0\2\6"+
    "\10\0\1\6\1\241\4\6\1\0\21\6\13\0\2\6"+
    "\10\0\6\6\1\0\7\6\1\242\11\6\13\0\2\6"+
    "\10\0\6\6\1\0\1\6\1\243\17\6\13\0\2\6"+
    "\10\0\1\244\5\6\1\0\21\6\13\0\2\6\10\0"+
    "\6\6\1\0\13\6\1\245\5\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\246\16\6\13\0\2\6\10\0"+
    "\6\6\1\0\12\6\1\247\6\6\13\0\2\6\10\0"+
    "\6\6\1\0\4\6\1\250\14\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\251\16\6\13\0\2\6\10\0"+
    "\5\6\1\252\1\0\21\6\13\0\2\6\10\0\2\6"+
    "\1\253\3\6\1\0\5\6\1\254\13\6\13\0\2\6"+
    "\10\0\6\6\1\0\5\6\1\255\13\6\13\0\2\6"+
    "\10\0\2\6\1\256\3\6\1\0\21\6\13\0\2\6"+
    "\10\0\1\6\1\257\4\6\1\0\21\6\13\0\2\6"+
    "\10\0\5\6\1\260\1\0\21\6\13\0\2\6\10\0"+
    "\6\6\1\0\6\6\1\261\12\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\262\16\6\13\0\2\6\10\0"+
    "\2\6\1\263\3\6\1\0\21\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\264\16\6\13\0\2\6\10\0"+
    "\6\6\1\0\7\6\1\265\11\6\13\0\2\6\10\0"+
    "\6\6\1\0\1\266\20\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\267\16\6\13\0\2\6\10\0\1\270"+
    "\5\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\5\6\1\271\13\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\272\16\6\13\0\2\6\10\0\1\273\5\6"+
    "\1\0\21\6\13\0\2\6\10\0\4\6\1\274\1\6"+
    "\1\0\21\6\13\0\2\6\10\0\6\6\1\0\1\6"+
    "\1\275\17\6\13\0\2\6\10\0\2\6\1\276\3\6"+
    "\1\0\21\6\13\0\2\6\10\0\6\6\1\0\16\6"+
    "\1\277\2\6\13\0\2\6\10\0\6\6\1\0\1\6"+
    "\1\300\17\6\13\0\2\6\10\0\6\6\1\0\10\6"+
    "\1\301\10\6\13\0\2\6\10\0\2\6\1\302\3\6"+
    "\1\0\21\6\27\0\1\303\40\0\2\6\10\0\6\6"+
    "\1\0\13\6\1\304\5\6\13\0\2\6\10\0\6\6"+
    "\1\0\13\6\1\305\5\6\13\0\2\6\10\0\6\6"+
    "\1\0\6\6\1\306\12\6\13\0\2\6\10\0\6\6"+
    "\1\0\15\6\1\307\3\6\13\0\2\6\10\0\6\6"+
    "\1\0\1\6\1\310\17\6\13\0\2\6\10\0\6\6"+
    "\1\0\6\6\1\311\1\312\1\313\10\6\13\0\2\6"+
    "\10\0\1\314\5\6\1\0\21\6\13\0\2\6\10\0"+
    "\5\6\1\315\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\5\6\1\316\13\6\13\0\2\6\10\0\6\6"+
    "\1\0\3\6\1\317\15\6\13\0\2\6\10\0\6\6"+
    "\1\0\7\6\1\320\11\6\13\0\2\6\10\0\3\6"+
    "\1\321\2\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\7\6\1\322\11\6\13\0\2\6\10\0\2\6"+
    "\1\323\3\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\5\6\1\324\13\6\13\0\2\6\10\0\6\6"+
    "\1\0\7\6\1\325\11\6\13\0\2\6\10\0\6\6"+
    "\1\0\4\6\1\326\14\6\13\0\2\6\10\0\2\6"+
    "\1\327\3\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\330\16\6\13\0\2\6\10\0\4\6"+
    "\1\331\1\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\4\6\1\332\14\6\13\0\2\6\10\0\6\6"+
    "\1\0\5\6\1\333\13\6\13\0\2\6\10\0\6\6"+
    "\1\0\6\6\1\334\12\6\13\0\2\6\10\0\6\6"+
    "\1\0\1\6\1\335\17\6\13\0\2\6\10\0\2\6"+
    "\1\336\3\6\1\0\21\6\13\0\2\6\10\0\1\6"+
    "\1\337\4\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\340\16\6\13\0\2\6\10\0\6\6"+
    "\1\0\6\6\1\341\12\6\13\0\2\6\10\0\2\6"+
    "\1\342\3\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\7\6\1\343\11\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\344\16\6\13\0\2\6\10\0\1\345"+
    "\5\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\346\16\6\13\0\2\6\10\0\1\6\1\347"+
    "\4\6\1\0\21\6\30\0\1\350\37\0\2\6\10\0"+
    "\6\6\1\0\6\6\1\351\12\6\13\0\2\6\10\0"+
    "\1\352\5\6\1\0\21\6\13\0\2\6\10\0\1\353"+
    "\5\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\10\6\1\354\10\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\355\16\6\13\0\2\6\10\0\2\6\1\356"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\6\6\1\357\12\6\13\0\2\6\10\0\2\6\1\360"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\11\6\1\361\7\6\13\0\2\6\10\0\6\6\1\0"+
    "\6\6\1\362\12\6\13\0\2\6\10\0\6\6\1\0"+
    "\4\6\1\363\14\6\13\0\2\6\10\0\2\6\1\364"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\10\6\1\365\10\6\13\0\2\6\10\0\6\6\1\0"+
    "\11\6\1\366\7\6\13\0\2\6\10\0\3\6\1\367"+
    "\2\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\14\6\1\370\4\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\371\16\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\372\16\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\373\16\6\13\0\2\6\10\0\6\6\1\0"+
    "\1\6\1\374\17\6\13\0\2\6\10\0\6\6\1\0"+
    "\10\6\1\375\10\6\13\0\2\6\10\0\6\6\1\0"+
    "\4\6\1\376\14\6\13\0\2\6\10\0\6\6\1\0"+
    "\4\6\1\377\14\6\13\0\2\6\10\0\2\6\1\u0100"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\1\u0101\5\6"+
    "\1\0\21\6\31\0\1\u0102\36\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\u0103\16\6\13\0\2\6\10\0\2\6"+
    "\1\u0104\3\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\12\6\1\u0105\6\6\13\0\2\6\10\0\6\6"+
    "\1\0\11\6\1\u0106\7\6\13\0\2\6\10\0\4\6"+
    "\1\u0107\1\6\1\0\21\6\13\0\2\6\10\0\6\6"+
    "\1\0\2\6\1\u0108\16\6\13\0\2\6\10\0\1\6"+
    "\1\u0109\4\6\1\0\21\6\13\0\2\6\10\0\1\u010a"+
    "\5\6\1\0\21\6\13\0\2\6\10\0\2\6\1\u010b"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\2\6\1\u010c"+
    "\3\6\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\u010d\16\6\13\0\2\6\10\0\6\6\1\0"+
    "\1\6\1\u010e\17\6\32\0\1\u010f\35\0\2\6\10\0"+
    "\6\6\1\0\10\6\1\u0110\10\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\u0111\16\6\13\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\u0112\16\6\13\0\2\6\10\0"+
    "\5\6\1\u0113\1\0\21\6\13\0\2\6\10\0\5\6"+
    "\1\u0114\1\0\21\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\u0115\16\6\13\0\2\6\10\0\6\6\1\0"+
    "\4\6\1\u0116\14\6\13\0\2\6\10\0\6\6\1\0"+
    "\2\6\1\u0117\16\6\33\0\1\u0118\34\0\2\6\10\0"+
    "\6\6\1\0\2\6\1\u0119\16\6\13\0\2\6\10\0"+
    "\6\6\1\0\10\6\1\u011a\10\6\12\0\10\u0118\1\u011b"+
    "\44\u0118";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\27\1\1\11\11\1\2\11"+
    "\1\0\1\11\2\1\2\11\45\1\6\11\1\1\1\11"+
    "\1\1\6\11\1\0\1\11\56\1\2\11\1\0\53\1"+
    "\1\0\44\1\1\0\31\1\1\0\14\1\1\0\10\1"+
    "\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String str;
    int len = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 94: break;
          case 2: 
            { return new Token(Sym.TOKEN_IDENTIFICATOR, yytext(), yyline, yycolumn);
            }
          case 95: break;
          case 3: 
            { return new Token(Sym.TOKEN_SEPARATOR, yytext(), yyline, yycolumn);
            }
          case 96: break;
          case 4: 
            { return new Token(Sym.OPERATOR_MINUS, null, yyline, yycolumn);
            }
          case 97: break;
          case 5: 
            { return new Token(Sym.OPERATOR_SLASH, null, yyline, yycolumn);
            }
          case 98: break;
          case 6: 
            { return new Token(Sym.OPERATOR_STAR, null, yyline, yycolumn);
            }
          case 99: break;
          case 7: 
            { return new Token(Sym.OPERATOR_PLUS, null, yyline, yycolumn);
            }
          case 100: break;
          case 8: 
            { return new Token(Sym.OPERATOR_AND, null, yyline, yycolumn);
            }
          case 101: break;
          case 9: 
            { return new Token(Sym.OPERATOR_TILD, null, yyline, yycolumn);
            }
          case 102: break;
          case 10: 
            { return new Token(Sym.OPERATOR_EXCLAMATION, null, yyline, yycolumn);
            }
          case 103: break;
          case 11: 
            { return new Token(Sym.OPERATOR_MODULO, null, yyline, yycolumn);
            }
          case 104: break;
          case 12: 
            { return new Token(Sym.OPERATOR_LOWER, null, yyline, yycolumn);
            }
          case 105: break;
          case 13: 
            { return new Token(Sym.OPERATOR_GREATER, null, yyline, yycolumn);
            }
          case 106: break;
          case 14: 
            { return new Token(Sym.OPERATOR_EQUAL, null, yyline, yycolumn);
            }
          case 107: break;
          case 15: 
            { return new Token(Sym.OPERATOR_POWER, null, yyline, yycolumn);
            }
          case 108: break;
          case 16: 
            { return new Token(Sym.OPERATOR_OR, null, yyline, yycolumn);
            }
          case 109: break;
          case 17: 
            { return new Token(Sym.OPERATOR_MINUS_MINUS, null, yyline, yycolumn);
            }
          case 110: break;
          case 18: 
            { return new Token(Sym.OPERATOR_MINUS_EQUAL, null, yyline, yycolumn);
            }
          case 111: break;
          case 19: 
            { return new Token(Sym.TOKEN_STRING, yytext(), yyline, yycolumn);
            }
          case 112: break;
          case 20: 
            { yybegin(COMMENT);
            }
          case 113: break;
          case 21: 
            { return new Token(Sym.OPERATOR_SLASH_EQUAL, null, yyline, yycolumn);
            }
          case 114: break;
          case 22: 
            { return new Token(Sym.OPERATOR_STAR_EQUAL, null, yyline, yycolumn);
            }
          case 115: break;
          case 23: 
            { return new Token(Sym.TOKEN_IF, null, yyline, yycolumn);
            }
          case 116: break;
          case 24: 
            { return new Token(Sym.TOKEN_DO, null, yyline, yycolumn);
            }
          case 117: break;
          case 25: 
            { return new Token(Sym.OPERATOR_PLUS_PLUS, null, yyline, yycolumn);
            }
          case 118: break;
          case 26: 
            { return new Token(Sym.OPERATOR_PLUS_EQUAL, null, yyline, yycolumn);
            }
          case 119: break;
          case 27: 
            { return new Token(Sym.OPERATOR_AND_AND, null, yyline, yycolumn);
            }
          case 120: break;
          case 28: 
            { return new Token(Sym.OPERATOR_AND_EQUAL, null, yyline, yycolumn);
            }
          case 121: break;
          case 29: 
            { return new Token(Sym.OPERATOR_DIFFERENT, null, yyline, yycolumn);
            }
          case 122: break;
          case 30: 
            { return new Token(Sym.OPERATOR_MODULO_EQUAL, null, yyline, yycolumn);
            }
          case 123: break;
          case 31: 
            { return new Token(Sym.OPERATOR_LOWER_LOWER, null, yyline, yycolumn);
            }
          case 124: break;
          case 32: 
            { return new Token(Sym.OPERATOR_LOWER_EQUAL, null, yyline, yycolumn);
            }
          case 125: break;
          case 33: 
            { return new Token(Sym.OPERATOR_GREATER_GREATER, null, yyline, yycolumn);
            }
          case 126: break;
          case 34: 
            { return new Token(Sym.OPERATOR_GREATER_EQUAL, null, yyline, yycolumn);
            }
          case 127: break;
          case 35: 
            { return new Token(Sym.OPERATOR_EQUAL_EQUAL, null, yyline, yycolumn);
            }
          case 128: break;
          case 36: 
            { return new Token(Sym.OPERATOR_POWER_EQUAL, null, yyline, yycolumn);
            }
          case 129: break;
          case 37: 
            { return new Token(Sym.OPERATOR_OR_EQUAL, null, yyline, yycolumn);
            }
          case 130: break;
          case 38: 
            { return new Token(Sym.OPERATOR_OR_OR, null, yyline, yycolumn);
            }
          case 131: break;
          case 39: 
            { yybegin(YYINITIAL);
            }
          case 132: break;
          case 40: 
            { yybegin(COMMENT_DOC);
            }
          case 133: break;
          case 41: 
            { return new Token(Sym.TOKEN_TRY, null, yyline, yycolumn);
            }
          case 134: break;
          case 42: 
            { return new Token(Sym.TOKEN_NEW, null, yyline, yycolumn);
            }
          case 135: break;
          case 43: 
            { return new Token(Sym.TOKEN_INT, null, yyline, yycolumn);
            }
          case 136: break;
          case 44: 
            { return new Token(Sym.TOKEN_FOR, null, yyline, yycolumn);
            }
          case 137: break;
          case 45: 
            { return new Token(Sym.OPERATOR_LOWER_LOWER_EQUAL, null, yyline, yycolumn);
            }
          case 138: break;
          case 46: 
            { return new Token(Sym.OPERATOR_GREATER_GREATER_EQUAL, null, yyline, yycolumn);
            }
          case 139: break;
          case 47: 
            { return new Token(Sym.TOKEN_THIS, null, yyline, yycolumn);
            }
          case 140: break;
          case 48: 
            { return new Token(Sym.TOKEN_TRUE, null, yyline, yycolumn);
            }
          case 141: break;
          case 49: 
            { return new Token(Sym.TOKEN_BOOL, null, yyline, yycolumn);
            }
          case 142: break;
          case 50: 
            { return new Token(Sym.TOKEN_LONG, null, yyline, yycolumn);
            }
          case 143: break;
          case 51: 
            { return new Token(Sym.TOKEN_ELSE, null, yyline, yycolumn);
            }
          case 144: break;
          case 52: 
            { return new Token(Sym.TOKEN_ENUM, null, yyline, yycolumn);
            }
          case 145: break;
          case 53: 
            { return new Token(Sym.TOKEN_CASE, null, yyline, yycolumn);
            }
          case 146: break;
          case 54: 
            { return new Token(Sym.TOKEN_CHAR, null, yyline, yycolumn);
            }
          case 147: break;
          case 55: 
            { return new Token(Sym.TOKEN_GOTO, null, yyline, yycolumn);
            }
          case 148: break;
          case 56: 
            { return new Token(Sym.TOKEN_VOID, null, yyline, yycolumn);
            }
          case 149: break;
          case 57: 
            { return new Token(Sym.TOKEN_USING, null, yyline, yycolumn);
            }
          case 150: break;
          case 58: 
            { return new Token(Sym.TOKEN_UNION, null, yyline, yycolumn);
            }
          case 151: break;
          case 59: 
            { return new Token(Sym.TOKEN_THROW, null, yyline, yycolumn);
            }
          case 152: break;
          case 60: 
            { return new Token(Sym.TOKEN_BREAK, null, yyline, yycolumn);
            }
          case 153: break;
          case 61: 
            { return new Token(Sym.TOKEN_CATCH, null, yyline, yycolumn);
            }
          case 154: break;
          case 62: 
            { return new Token(Sym.TOKEN_CONST, null, yyline, yycolumn);
            }
          case 155: break;
          case 63: 
            { return new Token(Sym.TOKEN_CLASS, null, yyline, yycolumn);
            }
          case 156: break;
          case 64: 
            { return new Token(Sym.TOKEN_SHORT, null, yyline, yycolumn);
            }
          case 157: break;
          case 65: 
            { return new Token(Sym.TOKEN_FALSE, null, yyline, yycolumn);
            }
          case 158: break;
          case 66: 
            { return new Token(Sym.TOKEN_FLOAT, null, yyline, yycolumn);
            }
          case 159: break;
          case 67: 
            { return new Token(Sym.TOKEN_WHILE, null, yyline, yycolumn);
            }
          case 160: break;
          case 68: 
            { return new Token(Sym.TOKEN_TYPEID, null, yyline, yycolumn);
            }
          case 161: break;
          case 69: 
            { return new Token(Sym.TOKEN_RETURN, null, yyline, yycolumn);
            }
          case 162: break;
          case 70: 
            { return new Token(Sym.TOKEN_ELSEIF, null, yyline, yycolumn);
            }
          case 163: break;
          case 71: 
            { return new Token(Sym.TOKEN_STATIC, null, yyline, yycolumn);
            }
          case 164: break;
          case 72: 
            { return new Token(Sym.TOKEN_STRUCT, null, yyline, yycolumn);
            }
          case 165: break;
          case 73: 
            { return new Token(Sym.TOKEN_SIGNED, null, yyline, yycolumn);
            }
          case 166: break;
          case 74: 
            { return new Token(Sym.TOKEN_SIZEOF, null, yyline, yycolumn);
            }
          case 167: break;
          case 75: 
            { return new Token(Sym.TOKEN_SWITCH, null, yyline, yycolumn);
            }
          case 168: break;
          case 76: 
            { return new Token(Sym.TOKEN_INLINE, null, yyline, yycolumn);
            }
          case 169: break;
          case 77: 
            { return new Token(Sym.TOKEN_DOUBLE, null, yyline, yycolumn);
            }
          case 170: break;
          case 78: 
            { return new Token(Sym.TOKEN_DELETE, null, yyline, yycolumn);
            }
          case 171: break;
          case 79: 
            { return new Token(Sym.TOKEN_FRIEND, null, yyline, yycolumn);
            }
          case 172: break;
          case 80: 
            { return new Token(Sym.TOKEN_PUBLIC, null, yyline, yycolumn);
            }
          case 173: break;
          case 81: 
            { return new Token(Sym.TOKEN_TYPEDEF, null, yyline, yycolumn);
            }
          case 174: break;
          case 82: 
            { return new Token(Sym.TOKEN_DEFAULT, null, yyline, yycolumn);
            }
          case 175: break;
          case 83: 
            { return new Token(Sym.TOKEN_PRIVATE, null, yyline, yycolumn);
            }
          case 176: break;
          case 84: 
            { return new Token(Sym.TOKEN_VIRTUAL, null, yyline, yycolumn);
            }
          case 177: break;
          case 85: 
            { return new Token(Sym.TOKEN_UNSIGNED, null, yyline, yycolumn);
            }
          case 178: break;
          case 86: 
            { return new Token(Sym.TOKEN_TEMPLATE, null, yyline, yycolumn);
            }
          case 179: break;
          case 87: 
            { return new Token(Sym.TOKEN_TYPENAME, null, yyline, yycolumn);
            }
          case 180: break;
          case 88: 
            { return new Token(Sym.TOKEN_OPERATOR, null, yyline, yycolumn);
            }
          case 181: break;
          case 89: 
            { return new Token(Sym.TOKEN_REGISTER, null, yyline, yycolumn);
            }
          case 182: break;
          case 90: 
            { return new Token(Sym.TOKEN_CONTINUE, null, yyline, yycolumn);
            }
          case 183: break;
          case 91: 
            { return new Token(Sym.TOKEN_NAMESPACE, null, yyline, yycolumn);
            }
          case 184: break;
          case 92: 
            { return new Token(Sym.TOKEN_PROTECTED, null, yyline, yycolumn);
            }
          case 185: break;
          case 93: 
            { str = yytext();
        len = str.length();
        return new Token(Sym.TOKEN_AUTHOR, str.substring(7, len), yyline, yycolumn);
            }
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

%import "abstractTree.*";
%import "operator.*";
%import "expressions.*";
%import "functions.*";
%import "declarations.*";
%class "ParserExpr";

%embed {:

static public class MyEvents extends beaver.Parser.Events {

	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

:} ;

%init {:
	report = new MyEvents();
:};

// COMPLETER A PARTIR D'ICI

%terminals PLUS, MINUS, TIMES, DIV, LPAR, RPAR;
%terminals UFCT, BFCT, ID, INTEGER, FLOAT, PI, E;
%terminals SEMI, EQ, COMMA;

%right UNARY_MINUS;
%left TIMES, DIV;
%left PLUS, MINUS;

%typeof PI, E, FLOAT = "Double";
%typeof INTEGER = "Integer";
%typeof ID, UFCT, BFCT = "String";
%typeof Program, Declarations, Declaration, Expression = "AbstTree";

%goal Program;

Program =
	Declarations.d SEMI Expression.e {: return new DeclarationList(d, e); :}
	;

Declarations =
	Declarations.d1 SEMI Declaration.d2 {: return new DeclarationList(d1, d2); :}
	| Declaration.d {: return d; :}
	;

Declaration =
	ID.id EQ Expression.e {: return new Affectation(e, id); :}
	;

Expression =
	Expression.e1 PLUS Expression.e2  {: return new PlusSymbol(e1, e2); :}
	| Expression.e1 MINUS Expression.e2 {: return new MinusSymbol(e1, e2); :}
	| Expression.e1 TIMES Expression.e2 {: return new MultiplySymbol(e1, e2); :}
	| Expression.e1 DIV Expression.e2 {: return new DivisionSymbol(e1, e2); :}
	| MINUS Expression.e @ UNARY_MINUS {: return new MinusSymbol(e); :}
	| LPAR Expression.e RPAR  {: return e; :}
	| UFCT.fct LPAR Expression.e RPAR {: return new UnaryFunction(e, fct); :}
	| BFCT.fct LPAR Expression.e1 COMMA Expression.e2 RPAR {: return new BinaryFunction(e1, e2, fct); :}
	| ID.id {: return new TypeIdenficatorExpr(id); :}
	| INTEGER.i {: return new TypeIntegerExpr(i); :}
	| FLOAT.f {: return new TypeFloatExpr(f); :}
	| PI.p {: return new TypeFloatExpr(p); :}
	| E.e {: return new TypeFloatExpr(e); :}
	;
